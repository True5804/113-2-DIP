% 2025/03/03 DIP Homework

clear all; % clean all memory
close all; % close all opened figures

RGB=imread("handwrite01.jpg");
figure;
subplot(1,2,1);
imshow(RGB);
title('Original');

% mapping RGB color to grayscale
Gray = rgb2gray(RGB);
rgb_adjusted = imadjust(Gray, stretchlim(Gray, [0.02, 0.98]), []);
black_img = im2bw(rgb_adjusted, 0.3);

subplot(1,2,2);
imshow(black_img);
title("Adjusted");

% write images into another new file
imwrite(black_img, 'S11159020_01.jpg');

% 2025/03/03 DIP Homework

clear all; % clean all memory
close all; % close all opened figures

RGB=imread("handwrite02.jpg");
figure;
subplot(1,2,1);
imshow(RGB);
title('Original');

% mapping RGB color to grayscale
Gray = rgb2gray(RGB);
rgb_adjusted = imadjust(Gray, stretchlim(Gray, [0.02, 0.9]), []);
black_img = im2bw(rgb_adjusted, 0.45);

subplot(1,2,2);
imshow(black_img);
title("Adjusted");

% write images into another new file
imwrite(black_img, 'S11159020_02.jpg');

% 2025/03/03 DIP Homework

clear all; % clean all memory
close all; % close all opened figures

RGB=imread("handwrite03.jpg");
figure;
subplot(1,2,1);
imshow(RGB);
title('Original');

% mapping RGB color to grayscale
Gray = rgb2gray(RGB);
rgb_adjusted = imadjust(Gray, stretchlim(Gray, [0.02, 0.85]), []);
black_img = im2bw(rgb_adjusted, 0.5);

subplot(1,2,2);
imshow(black_img);
title("Adjusted");

% write images into another new file
imwrite(black_img, 'S11159020_03.jpg');


clc;
clear all;
close all;

I = imread('a.jpeg');
%figure; imshow(I); title('Original Pic');

% 提取並顯示各色彩通道
redChannel = I(:,:,1);
greenChannel = I(:,:,2);
blueChannel = I(:,:,3);

% 創建只有紅色通道的RGB圖像
blueOnly = zeros(size(I), 'uint8');
blueOnly(:,:,1) = blueChannel; % 只填充紅色通道

% 針對紅色通道偏暗的問題進行增強
enhancedBlue = imadjust(blueChannel, [0 1], [0.2 1]); % 增強紅色通道

% 創建增強後的彩色圖像
enhancedImg = I;
enhancedImg(:,:,1) = enhancedBlue; % 替換為增強後的紅色通道

% 顯示增強效果
figure;
subplot(1,3,1); imshow(I); title('原始圖像');
subplot(1,3,2); imshow(blueOnly); title('紅色通道');
subplot(1,3,3); imshow(enhancedBlue); title('紅色通道增強後');


% show histogram by imhist()
clc;
clear all;
close all;

I = imread('pout.tif');
imhist(I);
figure;
subplot(1,2,1);
histogram(I);
title('Histogram');
subplot(1,2,2);
imhist(I);
title('imhist');

% different image with diff. histogram
uniform = ones(100)*128;
gradient = repmat(linspace(0,255,100)',1,100);
natural = imread('cameraman.tif');

figure;
subplot(3,2,1); imshow(uint8(uniform)); title('均勻灰色');
subplot(3,2,2); imhist(uint8(uniform)); title('均勻灰色直方圖');
subplot(3,2,3); imshow(uint8(gradient)); title('簡單漸變');
subplot(3,2,4); imhist(uint8(gradient)); title('漸變直方圖');
subplot(3,2,5); imshow(natural); title('自然圖像');
subplot(3,2,6); imhist(natural); title('自然圖像直方圖');


clc;
clear all;
close all;

dark = imread('pout.tif');
bright = 255-dark; % 利用反轉的效果來獲得比較亮的圖片 
% imadjust 
low_contrast = imadjust(dark,[0.2 0.8],[0.2 0.8]);
high_contrast = imadjust(dark,[0.2 0.8],[0 1]);

figure;
subplot(1,2,1); imshow(dark); title('暗圖像');
subplot(1,2,2); imhist(dark); title('暗圖像直方圖');
figure;
subplot(1,2,1); imshow(bright); title('亮圖像');
subplot(1,2,2); imhist(bright); title('亮圖像直方圖');
figure;
subplot(1,2,1); imshow(low_contrast); title('低對比度');
subplot(1,2,2); imhist(low_contrast); title('低對比度直方圖');
figure;
subplot(1,2,1); imshow(high_contrast); title('高對比度');
subplot(1,2,2); imhist(high_contrast); title('高對比度直方圖');

% catch RGB channel

clc;
clear All;
close All;
I = imread('6.png'); % 讀取彩色影像
figure;
imshow(I);
R = I(:,:,1); G = I(:,:,2); B = I(:,:,3); % 拆分 RGB 通道 
figure;
subplot(3,1,1), imhist(R); title('紅色通道'); 
subplot(3,1,2), imhist(G); title('綠色通道'); 
subplot(3,1,3), imhist(B); title('藍色通道');

%load color image and process it
clc;
clear All;
close All;

colorImg = imread('6.png');
figure;
imshow(colorImg); title('彩色原圖');

% 提取並顯示各色彩通道
redChannel = colorImg(:,:,1);
greenChannel = colorImg(:,:,2);
blueChannel = colorImg(:,:,3);

% 創建只有紅色通道的RGB圖像
redOnly = zeros(size(colorImg), 'uint8');
redOnly(:,:,1) = redChannel; % 只填充紅色通道

% 針對紅色通道偏暗的問題進行增強
enhancedRed = imadjust(redChannel, [0 1], [0.2 1]); % 增強紅色通道

% 創建增強後的彩色圖像
enhancedImg = colorImg;
enhancedImg(:,:,1) = enhancedRed; % 替換為增強後的紅色通道

% 顯示增強效果
figure;
subplot(1,3,1); imshow(colorImg); title('原始圖像');
subplot(1,3,2); imshow(redOnly); title('紅色通道');
subplot(1,3,3); imshow(enhancedImg); title('紅色通道增強後');

% 顯示增強前後的紅色通道直方圖比較
figure;
subplot(1,2,1); imhist(redChannel); title('原始紅色通道直方圖');
subplot(1,2,2); imhist(enhancedRed); title('增強後紅色通道直方圖');

%histogram equalization
clc;
clear All;
close All;
I = imread('pout.tif');
%figure; imshow(I); title('Original Pic');

% applying histogram equalization 
h = histeq(I);
figure;
subplot(1,4,1), imshow(I);title('Original Pic');
subplot(1,4,2), imhist(I);title('Original Hist');
subplot(1,4,3), imshow(h);title('Equalization Pic');
subplot(1,4,4), imhist(h);title('Equalization Hist');

%load pic
original_image=imread('orange.jpg');

% check whether color or gray
if size(original_image, 3) == 3
    gray_image = rgb2gray(original_image);
else
    gray_image = original_image;
end

% file is uint 8 ->255 2^8=256 -1
% file is unit 16
negative_image = 255-gray_image;


% 顯示結果
figure;
subplot(1,3,1), imshow(original_image), title('原始影像');
subplot(1,3,2), imshow(gray_image), title('灰階影像');
subplot(1,3,3), imshow(negative_image), title('負片效果');

clc;
clear All;
close All;

%read original image
original_image = imread('orange.jpg');

% 如果是彩色影像，先轉為灰度
if size(original_image, 3) == 3
    gray_image = rgb2gray(original_image);
else
    gray_image = original_image;
end
% 設定 threshold
threshold = 180;

binary_image = gray_image >= threshold  % 128-255 
% 顯示結果
figure;
subplot(1,3,1), imshow(original_image), title('原始影像');
subplot(1,3,2), imshow(gray_image), title('灰階影像');
subplot(1,3,3), imshow(binary_image), title('閥值效果');

%point bright
clc;
clear All;
close All;

%read original image
original_image = imread('orange.jpg');

Pbrightness = 50;
Nbrightness = -50;
%avoid overflow

colored_outputP = uint8(min(255, max(0, double(original_image)+ Pbrightness)));
colored_outputN = uint8(min(255, max(0, double(original_image)+ Nbrightness)));

% 顯示結果
figure;
subplot(1,3,1), imshow(original_image), title('原圖');
subplot(1,3,2), imshow(colored_outputP), title('調亮');
subplot(1,3,3), imshow(colored_outputN), title('調暗');

%point bright by channel
clc;
clear All;
close All;

%read original image
original_image = imread('orange.jpg');

% brightness to each different channels 
% show each channel
R = original_image(:,:,1);
G = original_image(:,:,2);
B = original_image(:,:,3);

R_new=uint8(min(255, max(0, double(R)+ 50)));


% 三個不同 channel -> 整併
colored_output = cat(3, R_new,G,B);

% 顯示結果
figure;
subplot(1,2,1), imshow(original_image), title('原圖');
subplot(1,2,2), imshow(colored_output), title('調亮R channel');

%point contrast
clc;
clear All;
close All;

%read original image
original_image = imread('orange.jpg');

contrast = 1.5

img_double = double(original_image);
enhanced_img = img_double *contrast;

% overflow
enhanced_img = uint8(min(255, max(0, enhanced_img)));

% 顯示結果
figure;
subplot(1,2,1), imshow(original_image), title('原圖');
subplot(1,2,2), imshow(colored_output), title('調整contrast');

%% Affine translate 
 
% 讀取原始影像
original_image = imread('flower.jpg');
% 定義平移參數(x方向移動50像素，y方向移動30像素)
tx = 50;
ty = 30;
% 創建平移矩陣 [ , , ]
tform = affine2d([1 0 0; 0 1 0; tx ty 1]);
% 創建一個比原始影像大的輸出視圖，確保能看到平移部分
[h, w, ~] = size(original_image);
outputView = imref2d([h+abs(ty)*2, w+abs(tx)*2]);
outputView.XWorldLimits = outputView.XWorldLimits - tx;
outputView.YWorldLimits = outputView.YWorldLimits - ty;
% 應用變換
outputImg = imwarp(original_image, tform, 'OutputView', outputView);
% 顯示結果
figure;
subplot(1,2,1), imshow(original_image), title('原始影像');
subplot(1,2,2), imshow(outputImg), title('平移後影像');

%% Affine rotate / change angle
clc;
clear all;
close all;
% 讀取原始影像
original_image = imread('flower.jpg');
% 定義旋轉角度(弧度)
theta = 45 * (pi/180); % 45度旋轉
% 旋轉矩陣
cos_theta = cos(theta);
sin_theta = sin(theta);
% tform = affine2d([1 0 0; 0 1 0; tx ty 1]);
tform = affine2d([cos_theta -sin_theta 0; sin_theta cos_theta 0; 0 0 1]);
% 應用變換
outputImg = imwarp(original_image, tform);
% 顯示結果
figure;
subplot(1,2,1), imshow(original_image), title('原始影像');
subplot(1,2,2), imshow(outputImg), title('旋轉後影像');

%% Power law transformation
clc;
clear all;
close all;
% 讀取原始影像
original_image = imread('HDR_Banff.jpeg');
if size(original_image,3) ==3
    % color image
    img_double = im2double(original_image);
else
    % gray image
    img_double = im2double(original_image);
end
% give different gamma value
gamma_value = [0.3, 0.6, 1.1,1.4,2.7];
n = length(gamma_value);
figure;
subplot(1,n+1,1), imshow(img_double), title('原始影像');
% 根據 gamma value 自動產生每一個不同的 value 的圖片
for i =1:n
    gamma =gamma_value(i);
    corrected_img = img_double.^gamma;
    % show the pic    
    subplot(1,n+1,i+1), imshow(corrected_img), title(['\gamma=', num2str(gamma)]);
end

%% Power law with auto adjustment
clc;
clear all;
close all;
% 讀取原始影像
original_image = imread('flower.jpg');
img_double = im2double(original_image);
% count average bright
mean_intensity = mean(img_double(:));
% 根據 mean_intensity 自動的調整 gamma value
% 圖片本身很暗 -> 較小的 gamma value
if mean_intensity <0.4
    gamma =0.35; %調亮
elseif mean_intensity >0.7
    gamma =1.5; %增強過量的影像對比度
else
    gamma = 1;
end
corrected_img = img_double.^gamma;
% 顯示結果
figure;
subplot(1,2,1), imshow(original_image), title('原始影像');
%subplot(1,2,2), imshow(corrected_img), title('自動校正');
subplot(1,2,2), imshow(corrected_img), title(['自動校正 \gamma=', num2str(gamma)]);

%% Power law of partial 
clc;
clear all;
close all;

% 讀取原始影像
original_image = imread('orange.jpg');
img_double = im2double(original_image);

% 計算影像的平均亮度
mean_intensity = mean(img_double(:));

% 把一張圖片切割成許多的網格
block_size = 64;
[h, w, c] = size(img_double);
corrected_img = zeros(size(img_double));

% 一一的對切割後的網格進行適當的gamma adjustment
for i=1:block_size:h
    for j=1:block_size:w
        %定義目前這一塊的範圍
        row_end =min(i+block_size-1,h);
        col_end = min(j+block_size-1,w);

        %提取當前的這一塊 
        block = img_double(i:row_end, j:col_end,:);
        %計算 block 的平均亮度
        mean_block = mean(block(:));
        if mean_block <0.3 
            gamma = 0.4; %提高暗的影像
        elseif mean_block <0.5 
            gamma = 0.7 % 增強過量影像的對比度
        elseif mean_block <0.7
            gamma = 1.0;
        else 
            gamma = 1.5;
        end

        % apply power law 
        corrected_block=block.^gamma;

        % 完成後將校正的結果放回影像中
        corrected_img(i:row_end, j:col_end,:)=corrected_block;
    end
end

% show output
figure;
subplot(1,2,1), imshow(img_double), title("Original");
subplot(1,2,2), imshow(corrected_img), title('Partial Adjusted Gamma');


clc;
clear all;
close all;
img = imread('old2.jpg');
img_double = im2double(img);

% 計算第5百分位和第95百分位
sorted_pixels = sort(img_double(:));
num_pixels = numel(sorted_pixels);
low_idx = round(0.05 * num_pixels);
high_idx = round(0.95 * num_pixels);
low_val = sorted_pixels(low_idx);
high_val = sorted_pixels(high_idx);

% 應用百分位拉伸
stretched_img = img_double;
stretched_img(img_double < low_val) = 0;
stretched_img(img_double > high_val) = 1;

% 線性映射中間區域
mask = (img_double >= low_val) & (img_double <= high_val);
stretched_img(mask) = (img_double(mask) - low_val) / (high_val - low_val);

% 顯示結果
figure;
subplot(1,2,1), imshow(img_double), title('原始影像');
subplot(1,2,2), imshow(stretched_img), title('百分位對比度拉伸');

% 分段線性對比度拉伸
clc;
clear all;

img = imread('old2.jpg');
img_double = im2double(img);

% 定義分段線性變換的參數
r1 = 0.2;  % 輸入下限
r2 = 0.6;  % 輸入上限
s1 = 0.0;  % 輸出下限
s2 = 1.0;  % 輸出上限

% 利用contrast strench
stretched_img = img_double;
stretched_img(img_double<r1) = s1; 
stretched_img(img_double>r2) = s2;
% 線性映射中間區域 
mask = (img_double>= r1) &(img_double<=r2);
stretched_img(mask)=(img_double(mask)-r1)*(s2-s1)/(r2-r1) + s1;

% 顯示結果
figure;
subplot(1,2,1), imshow(img_double), title('原始影像');
subplot(1,2,2), imshow(stretched_img), title('分段線性對比度拉伸');

% 自適應的對比度拉伸 
clc;
clear all;

img = imread('old2.jpg');
img_double = im2double(img);

% 首先進行對比度拉伸
min_val = min(img_double(:));
max_val = max(img_double(:));
stretched_img = (img_double - min_val) / (max_val - min_val);

% 步驟2：伽瑪校正，增強中間調
gamma = 0.6;
gamma_corrected = stretched_img.^gamma;


% 顯示結果
figure;
subplot(1,3,1), imshow(img_double), title('原始影像');
subplot(1,3,2), imshow(stretched_img), title('對比度拉伸');
subplot(1,3,3), imshow(gamma_corrected), title('拉伸+Power Law變換');

clc;
close all;
clear all;

I = imread('lenna.jpeg');

I_double = double(I);

% create convolution 
kernel_size =3;
blur_kernel = ones(kernel_size)/(kernel_size^2);
%[1,1,1; 1,1,1;1,1,1]
%[1/9,1/9,1/9; 1/9,1/9,1/9;1/9,1/9,1/9]

kernel02=5;
blur_kernel02 = ones(kernel02)/(kernel02^2)

% apply kernel 
I_blurred = conv2(I_double, blur_kernel,'same');
I_blurred02 = conv2(I_double, blur_kernel02,'same');

I_blurred = uint8(I_blurred);
I_blurred02 = uint8(I_blurred02);

figure;
subplot(1,3,1);
imshow(I);
title('Original');

subplot(1,3,2);
imshow(I_blurred);
title('3*3 Conv2D');

subplot(1,3,3);
imshow(I_blurred02);
title('5*5 Conv2D');

% use different shape full same valid
clc;
close all;
clear all;

I = imread('lenna.jpeg');

I_double = double(I);
% create convolution 
kernel_size =9;
blur_kernel = ones(kernel_size)/(kernel_size^2);

% 使用 conv2 進行卷積
I_blur_same = conv2(I_double, blur_kernel, 'same');
I_blur_full = conv2(I_double, blur_kernel, 'full');
I_blur_valid = conv2(I_double, blur_kernel, 'valid');


% 顯示結果
figure;
subplot(2, 2, 1);
imshow(uint8(I_double));
title('原始影像');

subplot(2, 2, 2);
imshow(uint8(I_blur_same));
title(sprintf('Same [%dx%d]', size(I_blur_same)));

subplot(2, 2, 3);
imshow(uint8(I_blur_full));
title(sprintf('Full [%dx%d]', size(I_blur_full)));

subplot(2, 2, 4);
imshow(uint8(I_blur_valid));
title(sprintf('Valid [%dx%d]', size(I_blur_valid)));

crop_size = 50;
figure;
subplot(2, 2, 1);
imshow(uint8(I_double(1:crop_size, 1:crop_size)));
title('原始影像 (左上角)');

subplot(2, 2, 2);
imshow(uint8(I_blur_same(1:crop_size, 1:crop_size)));
title('Same (左上角)');

subplot(2, 2, 3);
imshow(uint8(I_blur_full(1:crop_size, 1:crop_size)));
title('Full (左上角，注意擴展)');

subplot(2, 2, 4);
if size(I_blur_valid, 1) >= crop_size && size(I_blur_valid, 2) >= crop_size
    imshow(uint8(I_blur_valid(1:crop_size, 1:crop_size)));
else
    imshow(uint8(I_blur_valid));
end
title('Valid (注意縮小)');

%Noise generater
clc;
clear all;
close all;
% 讀取影像
I = imread('lenna.jpeg');
% 顯示原始圖片
figure;
subplot(2, 3, 1);
imshow(I);
title('原始圖片');
% 添加高斯噪聲
I_gaussian_noise = imnoise(I, 'gaussian', 0, 0.01);
subplot(2, 3, 2);
imshow(I_gaussian_noise);
title('添加高斯噪聲');
% 添加椒鹽噪聲 (Salt & Pepper)
I_salt_pepper = imnoise(I, 'salt & pepper', 0.05);
subplot(2, 3, 3);
imshow(I_salt_pepper);
title('添加椒鹽噪聲');

% Denoising
kernel_size = 3;
kernel = ones(kernel_size) / (kernel_size^2);
% mean filter to GAUSSIAN NOISE
I_double = double(I_gaussian_noise);
I_mean_filter_gaussian = conv2(I_double, kernel, 'same');
I_mean_filter_gaussian = uint8(I_mean_filter_gaussian);
subplot(2, 3, 5);
imshow(I_mean_filter_gaussian);
title('高斯噪聲均值濾波結果');
% TO pepper and salt noise
I_double = double(I_salt_pepper);
I_mean_filter_salt_pepper = conv2(I_double, kernel, 'same');
I_mean_filter_salt_pepper = uint8(I_mean_filter_salt_pepper);
subplot(2, 3, 6);
imshow(I_mean_filter_salt_pepper);
title('P&S噪聲均值濾波結果');
% try different kernel
figure;
window_sizes = [3, 5, 7, 9];
for i = 1:length(window_sizes)
    ws = window_sizes(i);
    kernel = ones(ws) / (ws^2);
    
    I_double = double(I_gaussian_noise);
    filtered = conv2(I_double, kernel, 'same');
    filtered = uint8(filtered);
    
    subplot(2, 2, i);
    imshow(filtered);
    title(sprintf('%dx%d 均值濾波器', ws, ws));
end
figure;
subplot(2, 2, 1);
imshow(I);
title('原始圖片');
subplot(2, 2, 2);
imshow(I_salt_pepper);
title('椒鹽噪聲');
subplot(2, 2, 3);
imshow(I_mean_filter_salt_pepper);
title('均值濾波');
% 使用中值濾波處理椒鹽噪聲
I_median_filter = medfilt2(I_salt_pepper, [3 3]);
subplot(2, 2, 4);
imshow(I_median_filter);
title('中值濾波');

%% noise generator
clc;
clear all();
close all;

% get image
I = imread('lenna 1.jpeg');
I_double = im2double(I);

% create a folder for noise images
if ~exist('noise_images', 'dir')
    mkdir('noise_images');
end

imwrite(I, 'noise_images/lenna_original.png');

% 高斯噪聲
% J = imnoise(I,"gaussian")

% 不同均值和方差的高斯噪聲
gauss_params = [
    0, 0.01;   % 均值為0，方差為0.01
    0, 0.03;   % 均值為0，方差為0.03
    0, 0.05;   % 均值為0，方差為0.05
    0.1, 0.01; % 均值為0.1，方差為0.01
    -0.1, 0.01 % 均值為-0.1，方差為0.01
];

figure('Name', '高斯噪聲', 'Position', [100, 100, 1200, 400]);
subplot(2, 6, 1);
imshow(I_double);
title('原圖');

for i = 1:size(gauss_params, 1)
    m = gauss_params(i, 1);
    var = gauss_params(i, 2);
    %J = imnoise(I,"gaussian",m,var_gauss)
    noisy_img=imnoise(I_double,'gaussian',m,var);

    % save the noise image into the folder
    filename = sprintf('noise_images/lenna_gaussian_m%.1f_var%.2f.png', m, var);
    imwrite(noisy_img, filename);

    %show pic
    subplot(2, 6, i+1);
    imshow(noisy_img);
    title(sprintf('高斯噪聲 (m=%.1f, var=%.2f)', m, var));
end

%Poisson noise
poisson_img = imnoise(I_double, 'poisson');
subplot(2, 6, 7);
imshow(poisson_img);
title('Poisson');
imwrite(poisson_img, 'noise_images/lenna_poisson.png');

% Salt & pepper noise
salt_img = imnoise(I_double, 'salt & pepper', 0.1);
subplot(2, 6, 8);
imshow(salt_img);
title('Salt & Pepper');
imwrite(salt_img, 'noise_images/lenna_saltANDpepper.png');

% Speckle noise with specified variance
speckle_var = 0.05;
speckle_img = imnoise(I_double, 'speckle', speckle_var);
subplot(2, 6, 9);
imshow(speckle_img);
title(sprintf('Speckle (var=%.2f)', speckle_var));
imwrite(speckle_img, 'noise_images/lenna_speckle.png');

% Combined Poisson + Speckle noise
speckleANDpoisson = imnoise(poisson_img, 'speckle', speckle_var);
subplot(2, 6, 10);
imshow(speckleANDpoisson);
title('Poisson + Speckle');
imwrite(speckleANDpoisson, 'noise_images/lenna_speckleANDpoisson.png');

clc;
clear all;
close all;

image = imread('lenna 1.jpeg');
lap_filter = [0 1 0; 1 -4 1; 0 1 0];

lap_image = imfilter(image, lap_filter, 'replicate');

%lambda
lambda = 0.5;
% 銳化
sharp_image = image - lambda*lap_image;
figure;
subplot(1,3,1), imshow(image), title('Original');
subplot(1,3,2), imshow(lap_image), title('Laplician');
subplot(1,3,3), imshow(sharp_image), title('Sharp Processing');

%觀察數值
clc; clear all; close all;
image = imread('smooth_image.png');
image_gray = double(image);
disp(['Original', class(image_gray)]);
disp(['Original Range from', num2str(double(min(image_gray(:)))), ' to ', num2str(double(max(image_gray(:))))]);
% 拉普拉斯濾波器
laplacian_filter = [0 1 0; 1 -4 1; 0 1 0];
%uint8
laplacian_image = imfilter(image_gray, laplacian_filter, 'replicate');
% check laplacian range
disp(['Laplacian', class(laplacian_image)]);
disp(['Laplacian range from ', num2str(double(min(laplacian_image(:)))), ' to ', num2str(double(max(laplacian_image(:))))]);
%method 1 under uint8
lambda = 0.5;
sharpened_uint8 = uint8(double(image_gray) - lambda * double(laplacian_image));
% method 2 using double
image_gray_double = im2double(image_gray);
laplacian_double = imfilter(image_gray_double, laplacian_filter, 'replicate');
disp(['Transfer to double ', num2str(min(laplacian_double(:))), ' to ', num2str(max(laplacian_double(:)))]);
lambda_double = 0.5;
sharpened_double = image_gray_double - lambda_double * laplacian_double;
% 確保像素值在有效範圍內
sharpened_double = min(max(sharpened_double, 0), 1);
% 顯示結果
figure;
subplot(2,2,1), imshow(image), title('Original');
subplot(2,2,2), imshow(laplacian_image, []), title('Lap');
subplot(2,2,3), imshow(sharpened_uint8), title(['uint8 λ = ', num2str(lambda)]);
subplot(2,2,4), imshow(sharpened_double), title(['double λ = ', num2str(lambda_double)]);

%% generate a new picture which is more blur smooth
clc; 
clear all;
close all;

image = imread('lenna 1.jpeg');

image = double(image);

%generate Smooth image here we use Guass
h_size = 5;
sigma = 2;
h_smooth = fspecial('gaussian',[h_size h_size],sigma);
smooth_img = imfilter(image, h_smooth, 'replicate');
imwrite(uint8(smooth_img), fullfile('smooth_image.png'));
figure;
subplot(1,2,1), imshow(uint8(image)), title('Original');
subplot(1,2,2), imshow(uint8(smooth_img)), title('Smooth Image');

clear; clc; close all;
I=imread('lenna 1.jpeg');
smooth_img = imread('smooth_image.png');
I_double=double(I);
smooth_img = double(smooth_img);
high_boost_filter = [
    -1, -1, -1;
    -1,  8, -1;
    -1, -1, -1
];
edge_Oimg = imfilter(I_double, high_boost_filter, 'replicate');
edge_Simg = imfilter(smooth_img, high_boost_filter, 'replicate');
% normalization
edge_Oimg = abs(edge_Oimg);
edge_Oimg = edge_Oimg / max(edge_Oimg(:)) * 255;
edge_Simg = abs(edge_Simg);
edge_Simg = edge_Simg / max(edge_Simg(:)) * 255;
subplot(2, 2, 1);
imshow(uint8(I_double));
title('Origin');
subplot(2, 2, 3);
imshow(uint8(smooth_img));
title('Smooth');
subplot(2, 2, 2);
imshow(uint8(edge_Oimg));
title('Origin Edge');
subplot(2, 2, 4);
imshow(uint8(edge_Simg));
title('Smooth Edge');

% Sobel 
clear all; close all; clc;
img = imread('smooth_image.png');
img = double(img);
sobel_x = [-1 0 1; -2 0 2; -1 0 1];
sobel_y = [-1 -2 -1; 0 0 0; 1 2 1];
gradient_x = imfilter(img, sobel_x, 'replicate'); % 水平梯度
gradient_y = imfilter(img, sobel_y, 'replicate'); % 垂直梯度
gradient_magnitude = sqrt(gradient_x.^2 + gradient_y.^2);
%normalization
gradient_magnitude = gradient_magnitude / max(gradient_magnitude(:)) * 255;
gradient_direction = atan2(gradient_y, gradient_x);
subplot(1, 4, 1);
imshow(uint8(img));
title('Original');
subplot(1, 4, 2);
imshow(uint8(abs(gradient_x)));
title('水平梯度 (Sobel_x)');
subplot(1, 4, 3);
imshow(uint8(abs(gradient_y)));
title('垂直梯度 (Sobel_y)');
subplot(1, 4, 4);
imshow(uint8(gradient_magnitude));
title('Gradient');
%
figure('Name', 'Sobel enforcement result');
threshold = 40;  
binary_edge = gradient_magnitude > threshold;
binary_edge = imdilate(binary_edge, strel('disk', 1));
%將照片 edge 疊加回圖片中
alpha = 0.3;
normalized_gradient = gradient_magnitude / max(gradient_magnitude(:));
enhanced_direct = img + alpha * img .* normalized_gradient;
enhanced_direct = max(0, min(255, enhanced_direct));
subplot(2, 2, 1);
imshow(uint8(img));
title('Original');
subplot(2, 2, 2);
imshow(uint8(enhanced_direct));
title('Sobel');

% Canny Edge detection
clear all; close all; clc;
img = imread('smooth_image.png');
 
edges = edge(img, 'canny');
 
edge_enhanced = double(img);  
%edge_enhanced(edges) = 255;   % edge become white
edge_enhanced = uint8(edge_enhanced);
subplot(1, 3, 1);
imshow(img);
title('Oringinal');
subplot(1, 3, 2);
imshow(edges);
title('Canny edge detection');
subplot(1, 3, 3);
imshow(edge_enhanced);
title('Edge map to image');
